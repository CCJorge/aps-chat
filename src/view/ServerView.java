/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import dao.LoginDAO;
import javax.swing.JOptionPane;
import java.io.*;
import java.net.*;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author jorge
 */
public class ServerView extends javax.swing.JFrame {

    private ArrayList<Cliente> users = new ArrayList<>();

    public class Server implements Runnable {

        String usuario, senha;

        @Override
        public void run() {
            int porta = Integer.parseInt(txtPorta.getText());
            Socket cli = null;
            BufferedReader in = null;
            PrintStream out = null;
            ServerSocket ss = null;

            txtAreaLog.append("Escutando porta " + porta + "...\n");

            try {
                ss = new ServerSocket(porta);
                while (true) {
                    cli = ss.accept();
                    txtAreaLog.append("Nova conexão\n");
                    in = new BufferedReader(new InputStreamReader(cli.getInputStream()));
                    out = new PrintStream(cli.getOutputStream());
                    usuario = in.readLine();
                    senha = in.readLine();

                    if (LoginDAO.verificarCredenciais(usuario, senha)) {
                        txtAreaLog.append("Usuario " + usuario + " logado\n");
                        Thread client = new Thread(new Cliente(usuario, cli, in, out));
                        client.start();
                    } else {
                        txtAreaLog.append("Tentativa de login inválido: Usuário ou senha inválidos\n");
                        out.println("Login recusado. Usuário ou senha inválidos.");
                        cli.close();
                    }
                }
            } catch (IOException ex) {
                System.out.println(ex.getCause());
            } finally {
                try {
                    in.close();
                    out.close();
                    cli.close();
                    ss.close();
                } catch (IOException ex) {
                    System.out.println(ex.getCause());
                }
            }
        }

    }

    public class Cliente implements Runnable {

        String usuario, senha, mensagem;
        BufferedReader in = null;
        PrintStream out = null;
        Socket sck = null;

        public Cliente(String usuario, Socket sck, BufferedReader in, PrintStream out) {
            this.usuario = usuario;
            this.sck = sck;
            this.in = in;
            this.out = out;
            users.add(this);
        }

        public void run() {
            try {
                while ((mensagem = in.readLine()) != "sair") {
                    for (Cliente cli : users) {
                        if (cli != this) {
                            cli.out.println(mensagem);
                        }
                    }
                }
            } catch (IOException ex) {
                System.out.println(ex.getCause());
            }
        }
    }

    /**
     * Creates new form ServerView
     */
    public ServerView() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtAreaLog = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtPorta = new javax.swing.JTextField();
        btnIniciarServidor = new javax.swing.JButton();
        limparLog = new javax.swing.JButton();
        usuariosOnline = new javax.swing.JButton();
        encerrarServidor = new javax.swing.JButton();

        jLabel3.setText("jLabel3");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        txtAreaLog.setColumns(20);
        txtAreaLog.setRows(5);
        txtAreaLog.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtAreaLogKeyTyped(evt);
            }
        });
        jScrollPane1.setViewportView(txtAreaLog);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel1.setText("LOG:");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel2.setText("PORTA:");

        txtPorta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPortaActionPerformed(evt);
            }
        });
        txtPorta.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtPortaKeyTyped(evt);
            }
        });

        btnIniciarServidor.setText("Iniciar Servidor");
        btnIniciarServidor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIniciarServidorActionPerformed(evt);
            }
        });

        limparLog.setText("Limpar LOG");
        limparLog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                limparLogActionPerformed(evt);
            }
        });

        usuariosOnline.setText("Usuários Online");
        usuariosOnline.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                usuariosOnlineActionPerformed(evt);
            }
        });

        encerrarServidor.setText("Encerar Servidor");
        encerrarServidor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                encerrarServidorActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(usuariosOnline, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(limparLog, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(encerrarServidor)))
                    .addComponent(jLabel1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtPorta, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnIniciarServidor)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtPorta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnIniciarServidor))
                .addGap(37, 37, 37)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(usuariosOnline)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(limparLog)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(encerrarServidor))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 466, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(28, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void txtPortaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPortaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPortaActionPerformed

    private void btnIniciarServidorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIniciarServidorActionPerformed
        // TODO add your handling code here:
        if (txtPorta.getText().length() != 4) {
            JOptionPane.showMessageDialog(null, "A Porta precisa ter 4 numeros", "Erro", JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        Thread server = new Thread(new Server());
        server.start();
        txtPorta.setEnabled(false);
        btnIniciarServidor.setEnabled(false);
    }//GEN-LAST:event_btnIniciarServidorActionPerformed

    private void txtPortaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPortaKeyTyped
        // TODO add your handling code here:
        if (Character.isLetter(evt.getKeyChar())
                || txtPorta.getText().length() == 4) {
            evt.consume();
        }
    }//GEN-LAST:event_txtPortaKeyTyped

    private void txtAreaLogKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtAreaLogKeyTyped
        // TODO add your handling code here:
        evt.consume();
    }//GEN-LAST:event_txtAreaLogKeyTyped
    private void usuariosOnlineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_usuariosOnlineActionPerformed
        // TODO add your handling code here:
        if (!users.isEmpty()) {
            for (Cliente cli : users) {
                txtAreaLog.append(cli.usuario + "\n");
            }
        } else {
            txtAreaLog.append("Não há usuários online\n");
        }

    }//GEN-LAST:event_usuariosOnlineActionPerformed

    private void limparLogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_limparLogActionPerformed
        // TODO add your handling code here:
        txtAreaLog.setText("");
    }//GEN-LAST:event_limparLogActionPerformed

    private void encerrarServidorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_encerrarServidorActionPerformed
        txtAreaLog.append("Encerrando servidor...\n");
        for (Cliente cli : users) {
            cli.out.println("O servidor será encerrado e todos os usuários serão desconectados...");
        }
        
        /*try {
            Thread.sleep(1000 * 5);
        } catch (InterruptedException ex) {
            System.out.println(ex.getCause());
        }*/
        
        for (Cliente cli : users) {
            try {
                cli.out.println("Desconectado");
                cli.sck.close();
                users.remove(cli);
            } catch (IOException ex) {
                System.out.println(ex.getCause());
            }
        }
    }//GEN-LAST:event_encerrarServidorActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ServerView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ServerView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ServerView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ServerView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ServerView().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnIniciarServidor;
    private javax.swing.JButton encerrarServidor;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton limparLog;
    private javax.swing.JTextArea txtAreaLog;
    private javax.swing.JTextField txtPorta;
    private javax.swing.JButton usuariosOnline;
    // End of variables declaration//GEN-END:variables
}
